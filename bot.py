import sys
sys.path.insert(0, "/home/ispasatel/www/kosse_bot/site-packages")  # –ø—É—Ç—å –∫ —Å—Ç–æ—Ä–æ–Ω–Ω–∏–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∞–º
import os
import json
import pytz
import datetime
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters, ConversationHandler, CallbackQueryHandler

# --- –†–∞–±–æ—Ç–∞ —Å Google Sheets ---
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# --- –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
from dotenv import load_dotenv
load_dotenv()

# ================== –ù–ê–°–¢–†–û–ô–ö–ò ==================
organizer_contact = "@kosse_club"

ABOUT_PHOTO = "https://raw.githubusercontent.com/EV4557/KOSSE.club---bot/main/logoKosse.png"
ABOUT_TEXT = (
    "Kosse.club ‚Äî —ç—Ç–æ —Ç—É—Ä–±–∞–∑–∞ ¬´–ö–µ–º–ø–∏–Ω–≥ –∑–æ–Ω–∞¬ª, —Å–æ–∑–¥–∞–Ω–Ω–∞—è –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π —Å–µ–º–µ–π–Ω–æ–≥–æ –∏ –±–∏–∑–Ω–µ—Å-—Ñ–æ—Ä–º–∞—Ç–∞.\n\n"
    "–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º:\n"
    "‚Ä¢ üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°–µ–º–µ–π–Ω—ã–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ ‚Äî —Å–≤–∞–¥—å–±—ã, –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è, –∞—Ä–µ–Ω–¥–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–∏—á–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.\n"
    "‚Ä¢ üè¢ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã ‚Äî –º–∞–π—Å—ã, –∏–≤–µ–Ω—Ç—ã, —Ç–∏–º–±–∏–ª–¥–∏–Ω–≥–∏, —Ä–µ—Ç—Ä–∏—Ç—ã.\n"
    "‚Ä¢ üéØ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è –∏ –∞–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–¥—ã—Ö ‚Äî –ø–µ–π–Ω—Ç–±–æ–ª, –∫–æ–º–∞–Ω–¥–Ω—ã–µ –∏–≥—Ä—ã (¬´–ö—Ä–æ–∫–æ–¥–∏–ª¬ª, ¬´–ë–∏—Ç–≤–∞ –ì–µ—Ä–æ–µ–≤¬ª).\n"
    "‚Ä¢ üç∑ –ì–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã ‚Äî –¥–µ–≥—É—Å—Ç–∞—Ü–∏–∏ –≤–∏–Ω –∏ –¥—Ä—É–≥–∏—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤, —Å–æ–º–µ–ª—å–µ —Å–µ—Å—Å–∏–∏.\n"
    "‚Ä¢ üé® –¢–≤–æ—Ä—á–µ—Å–∫–∏–µ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã ‚Äî –ª–µ–ø–∫–∞, –∫–µ—Ä–∞–º–∏–∫–∞, —Å–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –∏–≥—Ä—É—à–µ–∫ –∏ –∏–∑–¥–µ–ª–∏–π.\n\n"
    "–£ –Ω–∞—Å –≤—ã –Ω–∞–π–¥—ë—Ç–µ –≤—Å—ë –¥–ª—è —è—Ä–∫–æ–≥–æ –æ—Ç–¥—ã—Ö–∞ –∏ —Å–ø–ª–æ—á–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã ‚Äî –æ—Ç –¥—É—à–µ–≤–Ω—ã—Ö —Å–µ–º–µ–π–Ω—ã—Ö —Ç–æ—Ä–∂–µ—Å—Ç–≤ –¥–æ –º–∞—Å—à—Ç–∞–±–Ω—ã—Ö –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π."
)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å—Ç–∞—Ä—Ç–∞
start_menu = ReplyKeyboardMarkup([
    ["–£–∑–Ω–∞—Ç—å –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö", "–£–∑–Ω–∞—Ç—å –æ–± –∞—Ä–µ–Ω–¥–µ"]
], resize_keyboard=True)

# –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
events_menu = ReplyKeyboardMarkup([
    ["–ö–æ–Ω—Ç–∞–∫—Ç—ã", "–ë–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"],
    ["–ù–µ–º–Ω–æ–≥–æ –æ –Ω–∞—Å", "–ü—Ä–∞–≤–∏–ª–∞ –ø–æ—Å–µ—â–µ–Ω–∏—è"],
    ["–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", "–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç"],
    ["‚¨Ö –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
], resize_keyboard=True)

# ================== GOOGLE SHEETS ==================
def get_client():
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    creds_json = os.getenv("GOOGLE_CREDS_JSON")
    if not creds_json:
        raise ValueError("‚ö†Ô∏è GOOGLE_CREDS_JSON –Ω–µ –Ω–∞–π–¥–µ–Ω! –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞ Railway")
    creds_dict = json.loads(creds_json)
    creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
    return gspread.authorize(creds)

def load_events_from_sheets():
    client = get_client()
    sheet_id = os.getenv("GOOGLE_SHEET_ID")
    if not sheet_id:
        raise ValueError("‚ö†Ô∏è GOOGLE_SHEET_ID –Ω–µ –Ω–∞–π–¥–µ–Ω! –£–∫–∞–∂–∏ –µ–≥–æ –≤ .env")
    sheet = client.open_by_key(sheet_id).sheet1
    rows = sheet.get_all_records()

    events = {}
    for row in rows:
        if str(row.get("–ê–∫—Ç–∏–≤–Ω–æ", "")).strip().lower() != "–¥–∞":
            continue
        events[row["–ù–∞–∑–≤–∞–Ω–∏–µ"]] = {
            "—Å—Å—ã–ª–∫–∞": row.get("–°—Å—ã–ª–∫–∞", ""),
            "—Ü–µ–Ω–∞": row.get("–¶–µ–Ω–∞", ""),
            "–≤—Ä–µ–º—è": row.get("–í—Ä–µ–º—è", ""),
            "–º–µ—Å—Ç–æ": row.get("–ú–µ—Å—Ç–æ", ""),
            "–¥—Ä–µ—Å—Å-–∫–æ–¥": row.get("–î—Ä–µ—Å—Å-–∫–æ–¥", "").strip(),
            "–æ–ø–∏—Å–∞–Ω–∏–µ": row.get("–û–ø–∏—Å–∞–Ω–∏–µ", "").strip()
        }
    return events

# ================== –ê–†–ï–ù–î–ê ==================
RENT_DATA = None
RENT_LAST_UPDATE = None
RENT_UPDATE_INTERVAL = 10 * 60  # 10 –º–∏–Ω—É—Ç
RENT_CHAT_MAP = {}  # —Å–ª–æ–≤–∞—Ä—å –¥–ª—è chat_id –ø–æ –ª–∏—Ü–µ–≤—ã–º —Å—á–µ—Ç–∞–º
REMINDER_LAST_SENT = {}  # —á—Ç–æ–±—ã —É—á–∏—Ç—ã–≤–∞—Ç—å –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è

def load_rent_sheet(force=False):
    global RENT_DATA, RENT_LAST_UPDATE
    now = datetime.datetime.now().timestamp()
    if force or RENT_DATA is None or RENT_LAST_UPDATE is None or (now - RENT_LAST_UPDATE) > RENT_UPDATE_INTERVAL:
        client = get_client()
        rent_sheet_id = os.getenv("GOOGLE_SHEET_RENT_ID")
        sheet = client.open_by_key(rent_sheet_id).worksheet("–†–ê–ë–û–ß–ê–Ø_2 –∫–≤–∞—Ä—Ç–∞–ª")
        RENT_DATA = sheet.get_all_values()
        RENT_LAST_UPDATE = now
        print("üîÑ –¢–∞–±–ª–∏—Ü–∞ –∞—Ä–µ–Ω–¥—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    return RENT_DATA

def get_rent_info(account_number):
    try:
        all_rows = load_rent_sheet(force=True)
        if not all_rows or len(all_rows) < 3:
            return {"error": "‚ùå –õ–∏—Å—Ç –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö."}

        # –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –∏ –≥–æ–¥
        now = datetime.datetime.now()
        month_name = now.strftime("%B").capitalize()
        month_rus = {
            "January":"–Ø–Ω–≤–∞—Ä—å","February":"–§–µ–≤—Ä–∞–ª—å","March":"–ú–∞—Ä—Ç","April":"–ê–ø—Ä–µ–ª—å",
            "May":"–ú–∞–π","June":"–ò—é–Ω—å","July":"–ò—é–ª—å","August":"–ê–≤–≥—É—Å—Ç","September":"–°–µ–Ω—Ç—è–±—Ä—å",
            "October":"–û–∫—Ç—è–±—Ä—å","November":"–ù–æ—è–±—Ä—å","December":"–î–µ–∫–∞–±—Ä—å"
        }[month_name]
        current_month = f"{month_rus} {now.year}"

        # –°—Ç–æ–ª–±–µ—Ü –ª–∏—Ü–µ–≤—ã—Ö —Å—á–µ—Ç–æ–≤ (A)
        account_col_idx = 0
        account_row = None
        account_number_str = str(account_number).strip()
        for row in all_rows[2:]:
            if len(row) > account_col_idx and str(row[account_col_idx]).strip() == account_number_str:
                account_row = row
                break
        if not account_row:
            return {"error": f"‚ùå –õ–∏—Ü–µ–≤–æ–π —Å—á—ë—Ç {account_number} –Ω–µ –Ω–∞–π–¥–µ–Ω."}

        # –ö–æ–ª–æ–Ω–∫–∞ –Ω—É–∂–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞
        header_row = all_rows[0]
        month_col_idx = None
        for idx, val in enumerate(header_row):
            if str(val).strip().lower() == current_month.lower():
                month_col_idx = idx
                break
        if month_col_idx is None:
            return {"error": f"‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ –∑–∞ {current_month} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."}

        total_col_idx = month_col_idx + 4
        total_value = account_row[total_col_idx] if len(account_row) > total_col_idx else "0"
        try:
            total_value_num = float(str(total_value).replace(",", "."))
        except:
            total_value_num = 0

        return {
            "account": account_number_str,
            "month": current_month,
            "total": total_value_num
        }

    except Exception as e:
        return {"error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}"}

# ================== –°–û–°–¢–û–Ø–ù–ò–Ø ==================
CHOOSE_ACTION, ASK_QUESTION, BUY_TICKET, CHOOSE_EVENT_FOR_QUESTION, ASK_ACCOUNT = range(5)

# ================== –ö–õ–Æ–ß–ï–í–´–ï –°–õ–û–í–ê ==================
PRICE_KEYWORDS = ["—Ü–µ–Ω–∞", "—Å—Ç–æ–∏–º–æ—Å—Ç—å", "–±–∏–ª–µ—Ç", "–æ–ø–ª–∞—Ç–∞", "—Ä—É–±", "‚ÇΩ"]
TIME_KEYWORDS = ["–≤—Ä–µ–º—è", "–∫–æ–≥–¥–∞", "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "–¥–∞—Ç–∞", "–Ω–∞—á–∞–ª–æ", "–æ–∫–æ–Ω—á–∞–Ω–∏–µ"]
PLACE_KEYWORDS = ["–º–µ—Å—Ç–æ", "–≥–¥–µ", "–∞–¥—Ä–µ—Å", "–ª–æ–∫–∞—Ü–∏—è", "–∫–µ–º–ø–∏–Ω–≥"]
RETURN_KEYWORDS = ["–≤–æ–∑–≤—Ä–∞—Ç", "–≤–µ—Ä–Ω—É—Ç—å", "–æ–±–º–µ–Ω", "–æ—Ç–º–µ–Ω–∞", "—Å–¥–∞—Ç—å –±–∏–ª–µ—Ç"]
CONTACT_KEYWORDS = ["–∫–æ–Ω—Ç–∞–∫—Ç", "—Å–≤—è–∑—å", "—Ç–µ–ª–µ—Ñ–æ–Ω", "–ø–æ—á—Ç–∞", "email", "–æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä"]
ABOUT_KEYWORDS = ["–æ –≤–∞—Å", "–æ –∫–ª—É–±–µ", "–æ –Ω–∞—Å", "–∏–Ω—Ñ–æ", "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"]

# ================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ==================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç Kosse.club üéüÔ∏è\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:",
        reply_markup=start_menu
    )
    return CHOOSE_ACTION

async def refresh_events(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global EVENTS
    EVENTS = load_events_from_sheets()
    await update.message.reply_text("‚úÖ –°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –æ–±–Ω–æ–≤–ª—ë–Ω!", reply_markup=events_menu)
    return CHOOSE_ACTION

async def refresh_rent(update: Update, context: ContextTypes.DEFAULT_TYPE):
    load_rent_sheet(force=True)
    await update.message.reply_text("‚úÖ –¢–∞–±–ª–∏—Ü–∞ –∞—Ä–µ–Ω–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∞!", reply_markup=start_menu)
    return CHOOSE_ACTION

async def handle_faq_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text_clean = update.message.text.strip().lower()
    if text_clean in ["—Ü–µ–Ω–∞", "–≤—Ä–µ–º—è", "–º–µ—Å—Ç–æ"]:
        context.user_data["faq_type"] = text_clean
        keyboard = [[name] for name in EVENTS.keys()] + [["‚¨Ö –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
        return CHOOSE_EVENT_FOR_QUESTION
    elif text_clean == "–≤–æ–∑–≤—Ä–∞—Ç –±–∏–ª–µ—Ç–∞":
        await update.message.reply_text(
             f"üßæ –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –±–∏–ª–µ—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞ {organizer_contact} –∏ —É–∫–∞–∂–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:\n\n"
            "1Ô∏è‚É£ –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞\n"
            "2Ô∏è‚É£ –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\n"
            "3Ô∏è‚É£ –ö–∞–∫–∏–µ –±–∏–ª–µ—Ç—ã –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å\n"
            "4Ô∏è‚É£ –ü–æ—á—Ç–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –±—ã–ª –æ—Ñ–æ—Ä–º–ª–µ–Ω –∑–∞–∫–∞–∑\n"
            "5Ô∏è‚É£ –°–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã\n"
            "6Ô∏è‚É£ –ü—Ä–∏—á–∏–Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞\n\n"
            "üìå –£—Å–ª–æ–≤–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞:\n"
            "‚Ä¢ –ë–æ–ª–µ–µ 5 –¥–Ω–µ–π ‚Äî —É–¥–µ—Ä–∂–∞–Ω–∏–µ 0%\n"
            "‚Ä¢ –û—Ç 4 –¥–æ 5 –¥–Ω–µ–π ‚Äî —É–¥–µ—Ä–∂–∞–Ω–∏–µ 50%\n"
            "‚Ä¢ –û—Ç 3 –¥–æ 4 –¥–Ω–µ–π ‚Äî —É–¥–µ—Ä–∂–∞–Ω–∏–µ 70%\n"
            "‚Ä¢ –ú–µ–Ω–µ–µ 3 –¥–Ω–µ–π ‚Äî –≤–æ–∑–≤—Ä–∞—Ç –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω",
            reply_markup=events_menu
        )
        return CHOOSE_ACTION
    elif text_clean == "‚¨Ö –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:", reply_markup=start_menu)
        return CHOOSE_ACTION
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é.")
        return ASK_QUESTION

async def handle_faq_event(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "‚¨Ö –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:", reply_markup=start_menu)
        return CHOOSE_ACTION
    faq_type = context.user_data.get("faq_type")
    event_info = EVENTS.get(text)
    if not event_info:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return CHOOSE_EVENT_FOR_QUESTION
    if faq_type == "—Ü–µ–Ω–∞":
        msg = f"–¶–µ–Ω–∞ –Ω–∞ {text}: {event_info.get('—Ü–µ–Ω–∞', '–£—Ç–æ—á–Ω—è–µ—Ç—Å—è')}"
    elif faq_type == "–≤—Ä–µ–º—è":
        msg = f"–í—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è {text}: {event_info.get('–≤—Ä–µ–º—è', '–£—Ç–æ—á–Ω—è–µ—Ç—Å—è')}"
    elif faq_type == "–º–µ—Å—Ç–æ":
        msg = f"–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è {text}: {event_info.get('–º–µ—Å—Ç–æ', '–£—Ç–æ—á–Ω—è–µ—Ç—Å—è')}"
    else:
        msg = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
    await update.message.reply_text(msg, reply_markup=events_menu)
    context.user_data.pop("faq_type", None)
    return CHOOSE_ACTION

async def handle_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text_clean = update.message.text.strip().lower()
    if text_clean == "‚¨Ö –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:", reply_markup=start_menu)
        return CHOOSE_ACTION
    if text_clean == "—É–∑–Ω–∞—Ç—å –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:", reply_markup=events_menu)
        return CHOOSE_ACTION
    elif text_clean == "—É–∑–Ω–∞—Ç—å –æ–± –∞—Ä–µ–Ω–¥–µ":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–∏—Ü–µ–≤–æ–π —Å—á—ë—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12345):")
        return ASK_ACCOUNT
    elif text_clean == "–∫—É–ø–∏—Ç—å –±–∏–ª–µ—Ç":
        keyboard = [[event] for event in EVENTS.keys()] + [["‚¨Ö –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
        return BUY_TICKET
    elif any(word in text_clean for word in CONTACT_KEYWORDS):
        await update.message.reply_text(f"üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã:\n{organizer_contact}", reply_markup=events_menu)
        return CHOOSE_ACTION
    elif text_clean == "–±–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è":
        if not EVENTS:
            await update.message.reply_text("–°–µ–π—á–∞—Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ—Ç.", reply_markup=events_menu)
        else:
            for name, info in sorted(EVENTS.items()):
                msg = f"üéâ {name}\n{info.get('–≤—Ä–µ–º—è','')}\n{info.get('–º–µ—Å—Ç–æ','')}"
                keyboard = []
                link = info.get("—Å—Å—ã–ª–∫–∞", "").strip()
                if link and (link.startswith("http://") or link.startswith("https://")):
                    keyboard.append([InlineKeyboardButton("–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç", url=link)])
                if info.get("–¥—Ä–µ—Å—Å-–∫–æ–¥"):
                    keyboard.append([InlineKeyboardButton("–î—Ä–µ—Å—Å-–∫–æ–¥", callback_data=f"dress:{name}")])
                if info.get("–æ–ø–∏—Å–∞–Ω–∏–µ"):
                    keyboard.append([InlineKeyboardButton("–ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"about:{name}")])
                reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None
                await update.message.reply_text(msg, reply_markup=reply_markup)
        return CHOOSE_ACTION
    elif text_clean == "–Ω–µ–º–Ω–æ–≥–æ –æ –Ω–∞—Å":
        await update.message.reply_photo(photo=ABOUT_PHOTO, caption="–ü—Ä–æ–µ–∫—Ç Kosse.club üëá", reply_markup=events_menu)
        await update.message.reply_text(ABOUT_TEXT, reply_markup=events_menu)
        return CHOOSE_ACTION
    elif text_clean == "–ø—Ä–∞–≤–∏–ª–∞ –ø–æ—Å–µ—â–µ–Ω–∏—è":
        rules = (
            "üéüÔ∏è *–ü—Ä–∞–≤–∏–ª–∞ –ø–æ—Å–µ—â–µ–Ω–∏—è:*\n\n"
            "1Ô∏è‚É£ –í—Ö–æ–¥ –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –±–∏–ª–µ—Ç–∞.\n"
            "2Ô∏è‚É£ –ö–∞–∂–¥—ã–π –≥–æ—Å—Ç—å –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ø—Ä–∏ —Å–µ–±–µ –¥–æ–∫—É–º–µ–Ω—Ç, —É–¥–æ—Å—Ç–æ–≤–µ—Ä—è—é—â–∏–π –ª–∏—á–Ω–æ—Å—Ç—å.\n"
            "3Ô∏è‚É£ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—ã –æ—Å—Ç–∞–≤–ª—è—é—Ç –∑–∞ —Å–æ–±–æ–π –ø—Ä–∞–≤–æ –æ—Ç–∫–∞–∑–∞—Ç—å –≤–æ –≤—Ö–æ–¥–µ –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω –∏ –±–µ–∑ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤.\n"
            "4Ô∏è‚É£ –ù–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –¥–æ–ø—É—Å–∫–∞—é—Ç—Å—è –ª–∏—Ü–∞ –≤ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–π, –≥—Ä—è–∑–Ω–æ–π –∏–ª–∏ –Ω–µ–ø–æ–¥–æ–±–∞—é—â–µ–π –æ–±—Å—Ç–∞–Ω–æ–≤–∫–µ –æ–¥–µ–∂–¥–µ.\n"
            "5Ô∏è‚É£ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ —Å–æ—Ö—Ä–∞–Ω–Ω–æ—Å—Ç—å –ª–∏—á–Ω—ã—Ö –≤–µ—â–µ–π –∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è —Ç—É—Ä–±–∞–∑—ã –Ω–µ—Å—É—Ç –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–∏.\n"
            "6Ô∏è‚É£ –ó–∞–ø—Ä–µ—â–µ–Ω—ã: –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ, –Ω–∞—Ä–∫–æ—Ç–∏—á–µ—Å–∫–∏–µ –≤–µ—â–µ—Å—Ç–≤–∞, –∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏ –∏ –æ—Ä—É–∂–∏–µ.\n"
            "7Ô∏è‚É£ –ù–∞—Ä—É—à–∏—Ç–µ–ª–∏ –ø—Ä–∞–≤–∏–ª –º–æ–≥—É—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω—ã –±–µ–∑ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –±–∏–ª–µ—Ç–∞.\n\n"
            "üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∏ —É–≤–∞–∂–µ–Ω–∏–µ –∫ –ø—Ä–∞–≤–∏–ª–∞–º!"
        )
        await update.message.reply_text(rules, parse_mode="Markdown", reply_markup=events_menu)
        return CHOOSE_ACTION
    elif text_clean == "–∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å":
        keyboard = [["–¶–µ–Ω–∞", "–í—Ä–µ–º—è", "–ú–µ—Å—Ç–æ", "–í–æ–∑–≤—Ä–∞—Ç –±–∏–ª–µ—Ç–∞"], ["‚¨Ö –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]
        await update.message.reply_text("‚ùì –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
        return ASK_QUESTION
    elif any(word in text_clean for word in PRICE_KEYWORDS + TIME_KEYWORDS + PLACE_KEYWORDS + RETURN_KEYWORDS + ABOUT_KEYWORDS):
        return await handle_faq_question(update, context)
    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é.", reply_markup=events_menu)
        return CHOOSE_ACTION

async def handle_buy_ticket(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "‚¨Ö –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:", reply_markup=start_menu)
        return CHOOSE_ACTION
    if text in EVENTS:
        await update.message.reply_text(f"üé´ –°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –±–∏–ª–µ—Ç–∞:\n{EVENTS[text]['—Å—Å—ã–ª–∫–∞']}", reply_markup=events_menu)
        return CHOOSE_ACTION
    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return BUY_TICKET

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    if data.startswith("dress:"):
        event_name = data.split(":", 1)[1]
        dress = EVENTS.get(event_name, {}).get("–¥—Ä–µ—Å—Å-–∫–æ–¥", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        await query.message.reply_text(f"üëî –î—Ä–µ—Å—Å-–∫–æ–¥ –¥–ª—è {event_name}:\n{dress}")
    elif data.startswith("about:"):
        event_name = data.split(":", 1)[1]
        about = EVENTS.get(event_name, {}).get("–æ–ø–∏—Å–∞–Ω–∏–µ", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        await query.message.reply_text(f"‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ {event_name}:\n{about}")

async def handle_account(update: Update, context: ContextTypes.DEFAULT_TYPE):
    account = update.message.text.strip()
    info = get_rent_info(account)

    if "error" in info:
        await update.message.reply_text(info["error"], reply_markup=start_menu)
        return CHOOSE_ACTION

    amount = info["total"]
    month_rus = info["month"]

    if amount < 0:
        await update.message.reply_text(
            f"üí≥ –ü–æ –ª–∏—Ü–µ–≤–æ–º—É ‚Ññ{account} –∑–∞ {month_rus} –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å: {abs(amount)} —Ä—É–±.",
            reply_markup=start_menu
        )
    elif amount > 0:
        await update.message.reply_text(
            f"‚úÖ –ü–æ –ª–∏—Ü–µ–≤–æ–º—É ‚Ññ{account} –∑–∞ {month_rus} –ø–µ—Ä–µ–ø–ª–∞—Ç–∞: {amount} —Ä—É–±. –ü–ª–∞—Ç–∏—Ç—å –Ω–µ –Ω—É–∂–Ω–æ.",
            reply_markup=start_menu
        )
    else:
        await update.message.reply_text(
            f"‚úÖ –ü–æ –ª–∏—Ü–µ–≤–æ–º—É ‚Ññ{account} –∑–∞ {month_rus} –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–µ—Ç (0 —Ä—É–±).",
            reply_markup=start_menu
        )

    return CHOOSE_ACTION

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=start_menu)
    return CHOOSE_ACTION

# ================== –†–ê–°–°–´–õ–ö–ê ==================

async def send_rent_reminders(context: ContextTypes.DEFAULT_TYPE):
    now = datetime.datetime.now(pytz.timezone("Europe/Moscow"))

    # –†–∞—Å—Å—ã–ª–∫–∞ —Ç–æ–ª—å–∫–æ —Å 24 –ø–æ 2 —á–∏—Å–ª–æ –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ
    if now.day < 24 and now.month != 2:  # —Ñ–µ–≤—Ä–∞–ª—å –æ—Ç–¥–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –Ω–µ —Å–ª–æ–º–∞—Ç—å
        return
    if now.day > 2 and now.day < 24:
        return

    # –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ 24-–≥–æ, 26-–≥–æ, 28-–≥–æ, 30-–≥–æ –∏ 1-–≥–æ, 2-–≥–æ —á–∏—Å–ª–∞
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ "–∫–∞–∂–¥—ã–µ –¥–≤–∞ –¥–Ω—è"
    if now.day >= 24 or now.day <= 2:
        if not ((now.day - 24) % 2 == 0 or now.day in [1, 2]):
            return

    load_rent_sheet(force=True)

    for row in RENT_DATA[2:]:
        if len(row) < 2:
            continue
        account_number = row[0].strip()
        chat_id = row[1].strip()
        if not chat_id.isdigit():
            continue
        chat_id = int(chat_id)

        info = get_rent_info(account_number)
        if "error" in info:
            continue
        total = info["total"]
        if total >= 0:
            continue  # –Ω–µ—Ç –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏

        text_message = (
            f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —É–≤–∞–∂–∞–µ–º—ã–π –∞–±–æ–Ω–µ–Ω—Ç!\n\n"
            f"–ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –∞–±–æ–Ω–µ–Ω—Ç—Å–∫–∞—è –ø–ª–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–Ω–µ—Å–µ–Ω–∞ **–¥–æ 3-–≥–æ —á–∏—Å–ª–∞** —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞ "
            f"(—Å–æ–≥–ª–∞—Å–Ω–æ –ø. 4.1.1 –¥–æ–≥–æ–≤–æ—Ä–∞).\n\n"
            f"–ë–∞–ª–∞–Ω—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {abs(total)} —Ä.\n\n"
            "‚ö†Ô∏è –ï—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ—Å—Ç—É–ø–∏—Ç –¥–æ 3-–≥–æ —á–∏—Å–ª–∞, —Å—É–º–º–∞ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏ –±—É–¥–µ—Ç —É–≤–µ–ª–∏—á–µ–Ω–∞!\n\n"
            "–û–ø–ª–∞—Ç–∏—Ç—å –º–æ–∂–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–æ–º –Ω–∞ –∫–∞—Ä—Ç—É –¢-–ë–∞–Ω–∫ –ø–æ –Ω–æ–º–µ—Ä—É +79062385238 (–í–∞–ª–µ–Ω—Ç–∏–Ω–∞ –°–∞–≤–≤–∞—Ç–∏–µ–≤–Ω–∞ –ê.).\n"
            "–ö–≤–∏—Ç–∞–Ω—Ü–∏—é –æ–± –æ–ø–ª–∞—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏—Å–ª–∞—Ç—å –Ω–∞ —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä.\n\n"
            "–° —É–≤–∞–∂–µ–Ω–∏–µ–º, –ì–ö –¢—ã—Ä–ù—ç—Ç.—Ä—Ñ!"
        )
        try:
            await context.bot.send_message(chat_id=chat_id, text=text_message, parse_mode="Markdown")
            print(f"üì§ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {chat_id}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ {chat_id}: {e}")

# ================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ==================
def main():
    TOKEN = "8244050011:AAGP565NclU046a-WsP-nO8hNOcvkwQCh0U"
    if not TOKEN:
        raise ValueError("‚ö†Ô∏è –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env")

    global EVENTS
    EVENTS = load_events_from_sheets()

    app = Application.builder().token(TOKEN).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSE_ACTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_action)],
            ASK_QUESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_faq_question)],
            CHOOSE_EVENT_FOR_QUESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_faq_event)],
            BUY_TICKET: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_buy_ticket)],
            ASK_ACCOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_account)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv)
    app.add_handler(CommandHandler("refresh", refresh_events))
    app.add_handler(CommandHandler("refresh_rent", refresh_rent))
    app.add_handler(CallbackQueryHandler(button_handler))

    async def auto_refresh_events(context: ContextTypes.DEFAULT_TYPE):
        global EVENTS
        EVENTS = load_events_from_sheets()
        print("üîÑ –°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—ë–Ω")

    async def auto_refresh_rent(context: ContextTypes.DEFAULT_TYPE):
        load_rent_sheet()

    # –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∏ –∞—Ä–µ–Ω–¥—É
    app.job_queue.run_repeating(auto_refresh_events, interval=600, first=10)
    app.job_queue.run_repeating(auto_refresh_rent, interval=600, first=10)

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ª–∂–Ω–∏–∫–æ–≤ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å, –Ω–æ —Ä–∞—Å—Å—ã–ª–∫–∞ —Ç–æ–ª—å–∫–æ —Å 24 —á–∏—Å–ª–∞
    # –∑–∞–ø—É—Å–∫–∞—Ç—å –≤ 16:00 –ø–æ –ú–æ—Å–∫–≤–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
    moscow_tz = pytz.timezone("Europe/Moscow")
    target_time = datetime.time(hour=16, minute=0, tzinfo=moscow_tz)
    app.job_queue.run_daily(send_rent_reminders, time=target_time)

    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    app.run_polling()

if __name__ == "__main__":
    main()